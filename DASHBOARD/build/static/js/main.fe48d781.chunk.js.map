{"version":3,"sources":["components/MenuWrapper/index.tsx","components/DashboardWrapper/index.tsx","components/HeaderComponent/index.tsx","graphql/queries/index.tsx","graphql/mutations/index.tsx","pages/DashboardPage/Config/index.tsx","pages/LandingPage/index.tsx","pages/MenuPage/index.tsx","pages/DashboardPage/index.tsx","utils/api.tsx","pages/MusicDashboard/index.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["MenuComponent","guilds","included","guild","avatar","icon","id","as","borderRadius","bg","p","w","px","h","boxSize","objectFit","src","name","to","split","filter","names","charAt","size","color","excluded","href","map","DashboardMenu","config","updatePrefix","updateChannelsWelcome","toast","useToast","console","log","initialValues","prefix","onSubmit","then","position","title","description","status","duration","isClosable","getGuildConfig","props","handleSubmit","type","onChange","handleChange","defaultValue","label","colorScheme","variant","LogsChannel","welcomechannelid","values","a","datasaved","output","getChannels","channel","value","selected","HeaderComponent","user","React","useState","loggedOut","setLoggedOut","getUser","discordId","py","transition","borderWidth","_expanded","_focus","boxShadow","direction","isinline","discordTag","onClick","window","location","axios","get","withCredentials","localStorage","clear","background","textColor","variantcolor","menuQueryPage","gql","HeaderComponentQuery","dashboardPageQuery","updateGuildPrefixMutation","DashboardConfigPage","history","match","useQuery","variables","guildId","params","loading","error","data","useMutation","updateChannels","updateGuildPrefixParent","channelId","LandingPage","MenuPage","getMutualGuilds","DashboardPage","findUser","put","catch","err","MusicPage","loadingPlayer","setLoadingPlayer","datos","setDatos","setError2","getData","response","queue","length","aria-label","onChangeEnd","MdGraphicEq","thumbnail","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","link","createHttpLink","uri","credentials","client","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe48d781.chunk.js","sourcesContent":["import React from \"react\";\nimport { Box, Image, Circle, Link } from \"@chakra-ui/react\";\nimport { rewriteURIForGET } from \"@apollo/client\";\nimport { Link as ReachLink } from \"react-router-dom\";\n\nexport function MenuComponent({ guilds }: { guilds: any }) {\n  function included(guild: any) {\n    let avatar;\n    if (guild.icon) {\n      avatar =\n        \"https://cdn.discordapp.com/icons/\" +\n        guild.id +\n        \"/\" +\n        guild.icon +\n        \".png\";\n\n      return (\n        <div>\n          <Box\n            as=\"button\"\n            borderRadius=\"md\"\n            bg=\"white\"\n            p=\"7\"\n            w=\"70%\"\n            px={4}\n            h={8}\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"34px\"\n              objectFit=\"cover\"\n              src={avatar}\n            />\n          </Box>\n          <li> {guild.name} </li>\n          <ReachLink to={`/dashboard/${guild.id}`}> View Dashboard</ReachLink>\n        </div>\n      );\n    } else if (!guild.icon) {\n      const nombres = guild.name.split(\" \");\n      let name: any;\n      const name2 = nombres.filter((names: any) => {\n        if (name) {\n          name = name + names.charAt(0);\n        } else {\n          name = names.charAt(0);\n        }\n      });\n      return (\n        <div>\n          <Box\n            as=\"button\"\n            borderRadius=\"md\"\n            bg=\"white\"\n            p=\"7\"\n            w=\"70%\"\n            px={4}\n            h={8}\n          >\n            <Circle size=\"34px\" bg=\"#23272A\" color=\"white\">\n              <div>{name}</div>\n            </Circle>\n          </Box>\n          <li> {guild.name} </li>\n          <ReachLink to={`/dashboard/${guild.id}`}> View Dashboard</ReachLink>\n        </div>\n      );\n    }\n  }\n  function excluded(guild: any) {\n    let avatar;\n    if (guild.icon) {\n      avatar =\n        \"https://cdn.discordapp.com/icons/\" +\n        guild.id +\n        \"/\" +\n        guild.icon +\n        \".png\";\n\n      return (\n        <div>\n          <Box\n            as=\"button\"\n            borderRadius=\"md\"\n            bg=\"white\"\n            p=\"7\"\n            w=\"70%\"\n            px={4}\n            h={8}\n          >\n            <Image\n              borderRadius=\"full\"\n              boxSize=\"34px\"\n              objectFit=\"cover\"\n              src={avatar}\n            />\n          </Box>\n          <li> {guild.name} </li>\n          <Link\n            href={`https://discord.com/oauth2/authorize?scope=bot+applications.commands&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fmenu&permissions=2147483647&client_id=818892469130362890&guild_id=${guild.id}`}\n          >\n            {\" \"}\n            Invite Bot\n          </Link>\n        </div>\n      );\n    } else if (!guild.icon) {\n      const nombres = guild.name.split(\" \");\n      let name: any;\n      const name2 = nombres.filter((names: any) => {\n        if (name) {\n          name = name + names.charAt(0);\n        } else {\n          name = names.charAt(0);\n        }\n      });\n      return (\n        <div>\n          <Box\n            as=\"button\"\n            borderRadius=\"md\"\n            bg=\"white\"\n            p=\"7\"\n            w=\"70%\"\n            px={4}\n            h={8}\n          >\n            <Circle size=\"34px\" bg=\"#23272A\" color=\"white\">\n              <div>{name}</div>\n            </Circle>\n          </Box>\n          <li> {guild.name} </li>\n          <Link\n            href={`https://discord.com/oauth2/authorize?scope=bot+applications.commands&response_type=code&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fmenu&permissions=2147483647&client_id=818892469130362890&guild_id=${guild.id}`}\n          >\n            {\" \"}\n            Invite Bot\n          </Link>\n        </div>\n      );\n    }\n  }\n  return (\n    <div>\n      {guilds.included.map((guild: any) => (\n        <div>{included(guild)}</div>\n      ))}\n      {guilds.excluded.map((guild: any) => (\n        <div>{excluded(guild)}</div>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Formik } from \"formik\";\nimport { Input, Button, Tooltip, useToast, Select } from \"@chakra-ui/react\";\ntype C = {\n  config: any;\n  updatePrefix?: any;\n  user: any;\n  updateChannelsWelcome: any;\n};\n\nexport function DashboardMenu({\n  config,\n  updatePrefix,\n  updateChannelsWelcome,\n}: C) {\n  const toast = useToast();\n  console.log(config);\n  function sleep(ms: any) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n  return (\n    <div>\n      <Formik\n        initialValues={{ prefix: config.prefix }}\n        onSubmit={(prefix) =>\n          updatePrefix(prefix).then(() => {\n            console.log(prefix);\n            if (prefix.prefix) {\n              toast({\n                position: \"bottom-right\",\n                title: \"Data saved\",\n                description: `We changed your prefix to: ${prefix.prefix}`,\n                status: \"success\",\n                duration: 4000,\n                isClosable: true,\n              });\n            } else {\n              toast({\n                position: \"bottom-right\",\n                title: \"Whats wrong with u\",\n                description: `I think ${config.getGuildConfig.prefix} is the already prefix ._.`,\n                status: \"success\",\n                duration: 4000,\n                isClosable: true,\n              });\n            }\n          })\n        }\n      >\n        {(props) => (\n          <form onSubmit={props.handleSubmit}>\n            <Input\n              type=\"text\"\n              name=\"prefix\"\n              onChange={props.handleChange}\n              defaultValue={config.getGuildConfig.prefix}\n            />\n            <Tooltip label=\"You need to update guild prefix?\">\n              <Button colorScheme=\"teal\" variant=\"ghost\" type=\"submit\">\n                {\" \"}\n                Update prefix{\" \"}\n              </Button>\n            </Tooltip>\n          </form>\n        )}\n      </Formik>\n      <Formik\n        initialValues={{\n          LogsChannel: config.getGuildConfig.welcomechannelid,\n        }}\n        onSubmit={async (values) => {\n          const datasaved = values.LogsChannel.split(\",\");\n          updateChannelsWelcome(datasaved[0]).then((output: any) => {\n            console.log(\"find2\");\n            console.log(values);\n\n            toast({\n              position: \"bottom-right\",\n              title: \"Data saved\",\n              description: `We changed your welcome channel to ${datasaved[1]}`,\n              status: \"success\",\n              duration: 4000,\n              isClosable: true,\n            });\n          });\n        }}\n      >\n        {(props) => (\n          <form onSubmit={props.handleSubmit}>\n            <Select name=\"LogsChannel\" onChange={props.handleChange}>\n              {config.getChannels.map((channel: any) => {\n                if (channel.type !== \"4\" && channel.type !== \"2\") {\n                  return (\n                    <option\n                      value={[channel.id, channel.name]}\n                      selected={\n                        channel.id === config.getGuildConfig.welcomechannelid\n                      }\n                    >\n                      {channel.name}\n                    </option>\n                  );\n                }\n              })}\n            </Select>\n            <Tooltip label=\"You need to update guild prefix?\">\n              <Button colorScheme=\"teal\" variant=\"ghost\" type=\"submit\">\n                {\" \"}\n                Update Welcome Channel{\" \"}\n              </Button>\n            </Tooltip>\n          </form>\n        )}\n      </Formik>\n    </div>\n  );\n}\n","import {\r\n  Button,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  MenuIcon,\r\n  MenuDivider,\r\n} from \"@chakra-ui/react\";\r\nimport { Stack, Image } from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\ntype C = { user: any };\r\n\r\nexport function HeaderComponent({ user }: C) {\r\n  const [loggedOut, setLoggedOut] = React.useState(false);\r\n  const login = () => {\r\n    window.location.href = \"http://localhost:3001/api/auth/discord\";\r\n  };\r\n  const dashboardLink = () => {\r\n    window.location.href = \"http://localhost:5000/menu\";\r\n  };\r\n  const logout = () => {\r\n    axios.get(\"http://localhost:3001/api/auth/logout\", {\r\n      withCredentials: true,\r\n    });\r\n    localStorage.clear();\r\n    setLoggedOut(true);\r\n  };\r\n  if (user) {\r\n    console.log(user);\r\n    if (user.getUser) {\r\n      if (!loggedOut) {\r\n        const avatar =\r\n          \"https://cdn.discordapp.com/avatars/\" +\r\n          user.getUser.discordId +\r\n          \"/\" +\r\n          user.getUser.avatar +\r\n          \".png\";\r\n        return (\r\n          <div>\r\n            <Menu>\r\n              <MenuButton\r\n                px={4}\r\n                py={2}\r\n                transition=\"all 0.2s\"\r\n                borderRadius=\"md\"\r\n                borderWidth=\"1px\"\r\n                _expanded={{ bg: \"white\" }}\r\n                _focus={{ boxShadow: \"outline\" }}\r\n              >\r\n                <Stack direction=\"row\" isinline=\"true\">\r\n                  <Image\r\n                    borderRadius=\"full\"\r\n                    boxSize=\"26px\"\r\n                    objectFit=\"cover\"\r\n                    src={avatar}\r\n                  />\r\n                  <h1>{user.getUser.discordTag}</h1>\r\n                </Stack>\r\n              </MenuButton>\r\n              <MenuList>\r\n                <MenuItem>\r\n                  <Button onClick={dashboardLink}>Go to Dashboard</Button>\r\n                </MenuItem>\r\n                <MenuItem>\r\n                  <Button\r\n                    onClick={logout}\r\n                    background=\"white\"\r\n                    colorScheme=\"gray\"\r\n                    textColor=\"red\"\r\n                  >\r\n                    Log out\r\n                  </Button>\r\n                </MenuItem>\r\n              </MenuList>\r\n            </Menu>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    if (!user.getUser || loggedOut) {\r\n      return (\r\n        <Button onClick={login} variantcolor=\"orange\">\r\n          Login\r\n        </Button>\r\n      );\r\n    }\r\n  }\r\n  return <h1>loading</h1>;\r\n}\r\n","import { gql } from \"@apollo/client\";\n\nexport const menuQueryPage = gql`\n  query getMenuPageQuery {\n    getUser {\n      discordId\n      discordTag\n      avatar\n    }\n    getMutualGuilds {\n      included {\n        name\n        icon\n        id\n      }\n      excluded {\n        name\n        icon\n        id\n      }\n    }\n  }\n`;\n\nexport const HeaderComponentQuery = gql`\n  query getMenuPageQuery {\n    getUser {\n      discordId\n      discordTag\n      avatar\n    }\n  }\n`;\nexport const statsQuery = gql`\n  query statsQuery {\n    getStats {\n      id\n      playingTime\n      weeklylbcd\n      commands\n      cleverbotMessages\n      logs\n      guildCount\n    }\n  }\n`;\n\nexport const dashboardPageQuery = gql`\n  query getDashboardPageData($guildId: String!) {\n    getUser {\n      discordId\n      discordTag\n      avatar\n    }\n    getGuildConfig(guildId: $guildId) {\n      prefix\n      welcomechannelid\n      id\n    }\n    getChannels(guildId: $guildId) {\n      name\n      type\n      id\n    }\n  }\n`;\nexport const channelsWelcomeQuery = gql`\n  query getChannels($channelId: String!) {\n    getChannels(channelId: $channelId) {\n      name\n      id\n    }\n  }\n`;\nexport const MusicDataQuery = gql`\n  query getChannels($channelId: String!) {\n    getChannels(channelId: $channelId) {\n      name\n      id\n    }\n  }\n`;\n","import { gql } from \"@apollo/client\";\nexport const updateGuildPrefixMutation = gql`\n  mutation UpdateGuildPrefix($guildId: String!, $prefix: String!) {\n    updateGuildPrefix(guildId: $guildId, prefix: $prefix) {\n      prefix\n      id\n    }\n  }\n`;\n\nexport const updateChannelsWelcome = gql`\n  mutation updateWelcomeChannel($channelId: String!, $guildId: String!) {\n    updateWelcomeChannel(guildId: $guildId, channelId: $channelId) {\n      id\n    }\n  }\n`;\n","import React from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { DashboardMenu } from \"../../../components\";\nimport { dashboardPageQuery } from \"../../../graphql/queries\";\nimport {\n  updateGuildPrefixMutation,\n  updateChannelsWelcome,\n} from \"../../../graphql/mutations\";\n\ninterface match {\n  path: string;\n  url: string;\n  isExact: boolean;\n  params: { id: string };\n}\ninterface history {\n  lenght: number;\n  action: string;\n  location: {\n    pathname: string;\n    search: string;\n    hash: string & number;\n    key: string;\n  };\n}\n\ntype A = { history: history; match: match };\n\nexport function DashboardConfigPage({ history, match }: A) {\n  const { loading, error, data } = useQuery(dashboardPageQuery, {\n    variables: { guildId: match.params.id },\n  });\n  const [updatePrefix] = useMutation(updateGuildPrefixMutation);\n  const [updateChannels] = useMutation(updateChannelsWelcome);\n\n  const updateGuildPrefixParent = async (prefix: any) => {\n    if (prefix.prefix) {\n      const response = await updatePrefix({\n        variables: {\n          guildId: match.params.id,\n          prefix: prefix.prefix,\n        },\n      });\n      return <h1>A</h1>;\n    }\n  };\n  const getChannels = async (channelId: any) => {\n    if (channelId.LogsChannel) {\n      const response = await updateChannels({\n        variables: {\n          channelId: channelId.LogsChannel,\n          guildId: match.params.id,\n        },\n      });\n      return <h1>A</h1>;\n    }\n  };\n\n  if (error) {\n    console.log(error);\n  }\n\n  if (!loading) {\n    const getGuildConfig = data;\n    const getUser = data;\n    return (\n      <div>\n        <DashboardMenu\n          user={getUser}\n          config={getGuildConfig}\n          updatePrefix={updateGuildPrefixParent}\n          updateChannelsWelcome={getChannels}\n        />\n      </div>\n    );\n  }\n  return <h1>Loading...</h1>;\n}\n","import React from \"react\";\nimport { HeaderComponent } from \"../../components\";\nimport { HeaderComponentQuery } from \"../../graphql/queries\";\nimport { useQuery } from \"@apollo/client\";\n\nexport function LandingPage(props: any) {\n  const login = () => {\n    window.location.href = \"http://localhost:3001/api/auth/discord\";\n  };\n  const { loading, error, data } = useQuery(HeaderComponentQuery);\n  if (error) console.log(error);\n  if (!loading) {\n    const getUser = data;\n    console.log(data);\n    return (\n      <div>\n        <HeaderComponent user={getUser} />\n      </div>\n    );\n  }\n\n  return <div>Loading...</div>;\n}\n","import React from \"react\";\nimport { getGuilds, getUserDetails } from \"../../utils/api\";\nimport { MenuComponent } from \"../../components\";\nimport { useQuery } from \"@apollo/client\";\nimport { menuQueryPage } from \"../../graphql/queries\";\n\nexport function MenuPage({}) {\n  const { loading, error, data } = useQuery(menuQueryPage);\n\n  if (error) {\n    console.log(error);\n  }\n  if (!loading && !error) {\n    console.log(data);\n    const { getMutualGuilds } = data;\n    return (\n      <div>\n        <h1>Menu Page</h1>\n        <MenuComponent guilds={getMutualGuilds} />\n      </div>\n    );\n  }\n  return <h1>Loading....</h1>;\n}\n","import React from \"react\";\nimport { Link as ReachLink } from \"react-router-dom\";\n\ninterface match {\n  params: { id: number };\n  path: string;\n  url: string;\n  isExact: boolean;\n}\n\ntype A = { match: match };\n\nexport function DashboardPage({ match }: A) {\n  return (\n    <div>\n      <h1>Dashboard Page</h1>\n      <ReachLink to={`${match.params.id}/config`}> go to config </ReachLink>\n    </div>\n  );\n}\n","import axios from \"axios\";\n\nexport function getUserDetails() {\n  return axios.get(\"http://localhost:3001/api/auth\", {\n    withCredentials: true,\n  });\n}\nexport function getGuilds() {\n  return axios.get(\"http://localhost:3001/api/discord/guilds\", {\n    withCredentials: true,\n  });\n}\nexport function getGuildConfig(guildId: String) {\n  return axios.get(\n    `http://localhost:3001/api/discord/guilds/${guildId}/config`,\n    {\n      withCredentials: true,\n    }\n  );\n}\nexport function updateGuildPrefix(guildId: String, prefix: String) {\n  return axios.put(\n    `http://localhost:3001/api/discord/guilds/${guildId}/prefix`,\n    {\n      prefix,\n    },\n    {\n      withCredentials: true,\n    }\n  );\n}\ntype C = { guildId: any; channelId: any; voiceId: any; song: any };\nexport function searchMusic({ guildId, channelId, voiceId, song }: C) {\n  return axios.post(\n    `http://localhost:3001/api/music/search`,\n    {\n      guildId,\n      textChannel: channelId,\n      voiceChannel: voiceId,\n      song,\n    },\n    {\n      withCredentials: true,\n    }\n  );\n}\nexport function findUser(data: any) {\n  return axios\n    .put(\n      `http://localhost:3001/api/music/finduser`,\n      {\n        data,\n      },\n      {\n        withCredentials: true,\n      }\n    )\n    .catch((err) => {\n      return err;\n    });\n}\nexport function getQueue(guildId: any) {\n  return axios\n    .put(\n      `http://localhost:3001/api/music/queue`,\n      {\n        guildId,\n      },\n      {\n        withCredentials: true,\n      }\n    )\n    .catch((err) => {\n      return err;\n    });\n}\n","/* eslint-disable jsx-a11y/alt-text */\nimport React, { Component } from \"react\";\nimport {\n  Slider,\n  SliderTrack,\n  SliderFilledTrack,\n  SliderThumb,\n  Box,\n  Text,\n} from \"@chakra-ui/react\";\nimport { HeaderComponent } from \"../../components\";\nimport { HeaderComponentQuery } from \"../../graphql/queries\";\nimport { useQuery } from \"@apollo/client\";\nimport { findUser, getQueue } from \"../../utils/api\";\nimport { MdGraphicEq } from \"react-icons/md\";\nimport { menuQueryPage } from \"../../graphql/queries\";\n\nexport function MusicPage(props: any) {\n  const state = {\n    loading: true,\n    Data: {},\n    queueData: {},\n    error: {},\n  };\n\n  const [loadingPlayer, setLoadingPlayer] = React.useState(true);\n  const [datos, setDatos] = React.useState({});\n  const [error2, setError2] = React.useState({});\n  const { loading, error, data } = useQuery(\n    HeaderComponentQuery && menuQueryPage\n  );\n  if (error) console.log(error);\n  if (!loading) {\n    const getUser = data;\n    if (loadingPlayer) {\n      const getData = async (data: any) => {\n        return await findUser(data);\n      };\n      getData(getUser).then((data) => {\n        const datos2 = data.response;\n        if (datos2) {\n          if (loadingPlayer) {\n            setError2({ error: data.response });\n            setLoadingPlayer(false);\n          }\n        } else {\n          if (loadingPlayer) {\n            getQueue(data.data[0].guild).then((queue) => {\n              setDatos({ data, queue });\n              setLoadingPlayer(false);\n            });\n          }\n        }\n      });\n    }\n    if (datos !== {}) {\n      if (!loadingPlayer) {\n        if ((datos as any).data.data.length === 0) {\n          return (\n            <div>\n              <Text>You are not listening any music, bitch.</Text>\n            </div>\n          );\n        } else {\n          console.log(datos);\n          return (\n            <div>\n              <HeaderComponent user={getUser} />\n              <Slider\n                aria-label=\"slider-ex-4\"\n                defaultValue={(datos as any).data.data.position}\n                onChangeEnd={(data) => console.log(data)}\n              >\n                <SliderTrack bg=\"red.100\">\n                  <SliderFilledTrack bg=\"tomato\" />\n                </SliderTrack>\n                <SliderThumb boxSize={6}>\n                  <Box color=\"tomato\" as={MdGraphicEq} />\n                </SliderThumb>\n              </Slider>\n              <img src={(datos as any).queue.data.thumbnail}></img>\n              <Text>Current Playing: {(datos as any).queue.data.title}</Text>\n              <Text>Hey! I found you </Text>\n            </div>\n          );\n        }\n      }\n    }\n  }\n\n  return <div>Loading...</div>;\n}\n\nfunction guildId(guildId: any, guild: any) {\n  throw new Error(\"Function not implemented.\");\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Button } from \"@chakra-ui/react\";\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\nimport {\n  LandingPage,\n  MenuPage,\n  DashboardConfigPage,\n  DashboardPage,\n  MusicPage,\n} from \"./pages\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact={true} component={LandingPage} />\n        <Route path=\"/menu\" exact={true} component={MenuPage} />\n        <Route\n          path=\"/dashboard/:id/config\"\n          exact={true}\n          component={DashboardConfigPage}\n        />\n        <Route path=\"/dashboard/:id\" exact={true} component={DashboardPage} />\n        <Route path=\"/music\" exact={true} component={MusicPage} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider, CSSReset } from \"@chakra-ui/react\";\nimport { BrowserRouter as Router, HashRouter } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { WebSocketLink } from \"apollo-link-ws\";\n\nconst link = createHttpLink({\n  uri: \"http://localhost:3001/graphql\",\n  credentials: \"include\",\n});\nconst client = new ApolloClient({\n  link,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <CSSReset />\n      <Router>\n        <ApolloProvider client={client}>\n          <HashRouter>\n            <App />\n          </HashRouter>\n        </ApolloProvider>\n      </Router>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}